
/** \file main_code.cpp Реализация алгоритма быстрой сортировки */
/// Реализация алгоритма быстрой сортировки
#include <iostream>
 
using namespace std;
 
//~ рекурсивная функция, база рекурсии -- один элемент
/** 
@function qsort - Рекурсивная функция производящая быструю сортировку, количество входных парметров функции - 3 
@param mass – параметр, вводящий массив, который необходимо отсортировать
@param low - параметр, вводящий нижнюю границу массива для сортировки
@param high - параметр, вводящий верхнюю границу массива для сортировки
*/
void qsort(int *mass, int low, int high) {
      int x = mass[(low+high)/2]; /// Выбираем опорный элемент - середину массива
      int i=low; 
      int j=high;
      /** Выполняем цикл с постусловием: следим за текущими индексами, пока индексы стоят на своих местах */
	  do {
            while (mass[i]<x) ++i; /// Сравниваем элементы нижней границы с опорным элементом, если элементы стоят верно, то инкрементируем индекс
            while (mass[j]>x) --j; /// Сравниваем элементы верхней границы с опорным элементом, если элемент стоят верно, то индекс декрементируем
            /** Если индекс верхней границы стал больше, чем индекс нижней границы, значит произошло что-то не то
             и элементы нужно поменять */
            if (i<=j) {
                  int tmp = mass[i];
                  mass[i] = mass[j];
                  mass[j] = tmp;
                  i++; j--;
            }
      } while (i<=j);
     
      if (j>low) qsort(mass,low,j); /// Если итоговый индекс верхней границы больше начального параметра нижней границы, то вызываем функцию qsort(mass,low,j)
      if (i<high) qsort(mass,i,high); /// Если итоговый индекс нижней границы меньше начального параметра верхней границы, то вызываем функцию qsort(mass,low,j)
     
}
 
/** 
@function quicksort 
Рекурсивная функция для вызова функции qsort с начальнами границами 0 и n , количество входных параметров функции - 2 
@param mass – параметр, вводящий массив, который необходимо отсортировать
@param n - параметр, означающий номер последнего элемента в массиве
*/

void quicksort(int *mass, int n) {
      qsort(mass,0,n); /// Вызовем функцию qsort с начальными границами 0 и n
}
 
/** 
@function main  Функция, которая является точкой входа в программу
*/
int main() {
      int n; /// Динамическое создание и заполнение массива
	  cout<< "Enter the number of elements"<<endl; 
	  cin>>n;
      cout << "Enter the"<<n<<" elements of massive (int): "<<endl;
      int* arr = new int[n];
      for (int i=0; i<n; i++)
            cin >> arr[i];
     
      /// Применяем алгоритм быстрой сортировки к созданному массиву
      quicksort(arr,n-1);
     
	  /// Выводим отсортированный массив
      for (int i=0; i<n; i++)
            cout << arr[i] << " ";
      cout << endl;
     
      return 0; /** return 0 , если программа завершена без ошибок */
}